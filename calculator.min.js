String.prototype.replaceAt=function(index,character){return this.substr(0,index)+character+this.substr(index+character.length)};
function trait(identifier,genoma){switch(identifier){case "p1T1no":case "p2T1no":this.traitName="Non Beige";this.dominance=0;this.allele1="a";this.allele2="a";this.dominantAllele=0;break;case "p1T1Etero":case "p2T1Etero":this.traitName="Recessive Beige";this.dominance=2;this.allele1="A";this.allele2="a";this.dominantAllele=1;break;case "p1T1Homo":case "p2T1Homo":this.traitName="Beige Homozigote";this.dominance=1;this.allele1="A";this.allele2="A";this.dominantAllele=3;break;case "p1T2no":case "p2T2no":this.traitName=
"Non Violet";this.dominance=0;this.allele1="b";this.allele2="b";this.dominantAllele=0;break;case "p1T2Etero":case "p2T2Etero":this.traitName="Violet carrier";this.dominance=3;this.allele1="B";this.allele2="b";this.dominantAllele=1;break;case "p1T2Homo":case "p2T2Homo":this.traitName="Violet";this.dominance=3;this.allele1="B";this.allele2="B";this.dominantAllele=3;break;case "p1T3no":case "p2T3no":this.traitName="Non Saphire";this.dominance=0;this.allele1="c";this.allele2="c";this.dominantAllele=0;
break;case "p1T3Etero":case "p2T3Etero":this.traitName="Saphire carrier";this.dominance=3;this.allele1="C";this.allele2="c";this.dominantAllele=1;break;case "p1T3Homo":case "p2T3Homo":this.traitName="Saphire";this.dominance=3;this.allele1="C";this.allele2="C";this.dominantAllele=3;break;case "p1T4no":case "p2T4no":this.traitName="non German Violet";this.dominance=0;this.allele1="d";this.allele2="d";this.dominantAllele=0;break;case "p1T4Etero":case "p2T4Etero":this.traitName="German Violet carrier";
this.dominance=3;this.allele1="D";this.allele2="d";this.dominantAllele=1;break;case "p1T4Homo":case "p2T4Homo":this.traitName="German Violet";this.dominance=3;this.allele1="D";this.allele2="D";this.dominantAllele=3;break;case "p1T5no":case "p2T5no":this.traitName="non White";this.dominance=0;this.allele1="e";this.allele2="e";this.dominantAllele=0;break;case "p1T5Etero":case "p2T5Etero":this.traitName="White";this.dominance=1;this.allele1="E";this.allele2="e";this.dominantAllele=1;break;case "p1T6no":case "p2T6no":this.traitName=
"non TOV";this.dominance=0;this.allele1="f";this.allele2="f";this.dominantAllele=0;break;case "p1T6Etero":case "p2T6Etero":this.traitName="TOV";this.dominance=1;this.allele1="F";this.allele2="f";this.dominantAllele=1;break;case "p1T7no":case "p2T7no":this.traitName="non Ebony";this.dominance=0;this.allele1="g";this.allele2="g";this.dominantAllele=0;break;case "p1T71":case "p2T71":this.traitName="Ebony 1";this.dominance=1;this.allele1="G";this.allele2="g";this.dominantAllele=1;break;case "p1T72":case "p2T72":this.traitName=
"Ebony 2";this.dominance=1;this.allele1="G";this.allele2="G";this.dominantAllele=3;break;case "p1T8no":case "p2T8no":this.traitName="non Grey";this.dominance=0;this.allele1="h";this.allele2="h";this.dominantAllele=0;break;case "p1T8Etero":case "p2T8Etero":this.traitName="Grey Eterozigote";this.dominance=2;this.allele1="H";this.allele2="h";this.dominantAllele=1;break;case "p1T8Homo":case "p2T8Homo":this.traitName="Grey Homozigote";this.dominance=2;this.allele1="H";this.allele2="H";this.dominantAllele=
3;break}}function parent(traits){this.T1=traits[0];this.T2=traits[1];this.T3=traits[2];this.T4=traits[3];this.T5=traits[4];this.T6=traits[5];this.T7=traits[6];this.T8=traits[7]}function getCombinations(chars){var result=[];var f=function(prefix,chars){for(var i=0;i<chars.length;i++){result.push(prefix+chars[i]);f(prefix+chars[i],chars.slice(i+1))}};f("",chars);return result}
function checkForDuplicates(arr){var sorted_arr=arr.toLowerCase().split("").sort();var results=[];for(var i=0;i<arr.length-1;i++)if(sorted_arr[i+1]==sorted_arr[i])return true;return false}function generateCrossArray(parent1){var crossArray=[];for(key in parent1){var trait=parent1[key];for(prop in trait)if(trait.hasOwnProperty(prop))if(prop=="allele1"||prop=="allele2")crossArray.push(trait[prop])}return crossArray.join("")}
function generateFinalArray(alleles){var lun=alleles.length/2;arr=getCombinations(alleles);retArray=[];for(var i=0;i<arr.length;i++)if(arr[i].length==lun)if(!checkForDuplicates(arr[i]))retArray.push(arr[i]);return retArray}
function generateResults(arr1,arr2){resArray=[];size=arr1.length;for(var i=0;i<size;i++)for(var j=0;j<size;j++){resArray[i+j*size]="";for(var k=0;k<size;k++){gene1=arr1[i].charAt(k);gene2=arr2[j].charAt(k);if(arr2[j].charAt(k)==arr2[j].charAt(k).toUpperCase()){resArray[i+j*size]+=arr2[j].charAt(k);resArray[i+j*size]+=arr1[i].charAt(k)}else{resArray[i+j*size]+=arr1[i].charAt(k);resArray[i+j*size]+=arr2[j].charAt(k)}}}return resArray}
function getPercentage(values){genoTypes=[];var tmp;for(var i=0;i<values.length;i++)if(genoTypes[values[i]]>=0)genoTypes[values[i]]++;else genoTypes[values[i]]=1;for(key in genoTypes)genoTypes[key]=genoTypes[key]*100/values.length;return genoTypes}function phenotyper(genoma){}var names;
$(document).ready(function(){jQuery.get("fenotipi.csv",function(data){names=$.csv.toArrays(data);console.log(names)});$("#calculate").click(function(){var tratti=[];$("#parent1 :radio:checked").each(function(index){var input=$(this).prop("value","on");tratti[index]=new trait(input.prop("id"))});tratti.push(new trait("p1T8Homo"));parent1=new parent(tratti);var tratti=[];$("#parent2 :radio:checked").each(function(index){var input=$(this).prop("value","on");tratti[index]=new trait(input.prop("id"))});
tratti.push(new trait("p1T8Homo"));parent2=new parent(tratti);var crossArray1=generateCrossArray(parent1);var crossArray2=generateCrossArray(parent2);console.log("You are crossing: "+crossArray1+" x "+crossArray2);finalArray1=generateFinalArray(crossArray1);finalArray2=generateFinalArray(crossArray2);var res=generateResults(finalArray1,finalArray2);var percentages=getPercentage(res);console.log(percentages);translate(percentages)})});
function translate(percentage){var tmp=[];res=[];for(key in percentage){trans=find(key,names);tmp[key]=trans[key];console.log(tmp);res.push({name:tmp[key],percentage:percentage[key]})}console.log(res)}function find(thing,theArray){var results,col,row,subArray;results=[];results[thing]="";for(row=0;row<theArray.length;++row){subArray=theArray[row];for(col=0;col<subArray.length;++col){value=subArray[col];if(value==thing)results[thing]+=subArray[col-1]}}return results};
